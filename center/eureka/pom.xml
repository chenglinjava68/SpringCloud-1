<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.springboot.cloud</groupId>
    <artifactId>eureka-server</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>eureka-server</name>
    <description>Demo project for Spring Cloud Eureka</description>

    <parent>
        <groupId>com.springboot.cloud</groupId>
        <artifactId>center</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <dependencies>
        <!--Eureka注册中心-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <serverId>docker-harbor</serverId>  <!-- 指定hurbor server -->
                    <skipDockerBuild>false</skipDockerBuild>
                    <registryUrl>registry.test.com</registryUrl>	<!--镜像生成后需要推送到某个仓库地址的配置-->
                    <pushImage>true</pushImage>		<!--是否向配置的仓库推送镜像-->
                    <imageName>registry.test.com/${docker.image.prefix}/${project.artifactId}:${project.version}</imageName>	<!--生成的镜像名称-->
                    <!--TAG,这里用工程版本号-->
                    <!--<imageTags>
                        <imageTag>${project.version}</imageTag>
                    </imageTags>-->
                    <!-- 使用Dockerfile -->
                    <dockerDirectory>${basedir}/src/main/docker</dockerDirectory>
                    <!--这里是复制 jar 包到 docker 容器指定目录配置-->
                    <forceTags>true</forceTags>		<!--覆盖相同标签镜像-->
                    <resources>					<!-- 指定资源文件 -->
                        <resource>
                            <targetPath>/</targetPath>	<!-- 指定要复制的目录路径，这里是当前目录 -->
                            <directory>${project.build.directory}</directory>	<!-- 指定要复制的根目录，这里是target目录 -->
                            <include>${project.build.finalName}.jar</include>	<!-- 指定需要拷贝的文件，这里指最后生成的jar包 -->
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
